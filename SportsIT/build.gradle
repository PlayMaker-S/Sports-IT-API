buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.3'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'TeamMakers'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
//	// QueryDSL
//	querydsl.extendsFrom compileClasspath
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.jetbrains:annotations:23.0.0'
    //implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'junit:junit:4.13.1'
	runtimeOnly 'mysql:mysql-connector-java:8.0.32'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

	implementation 'com.google.firebase:firebase-admin:9.1.1'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.1.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.1.0'
	implementation 'io.swagger.core.v3:swagger-core-jakarta:2.2.7'

	// jwt 토큰
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'mysql:mysql-connector-java:8.0.32'

	// Mockito
	testImplementation 'org.mockito:mockito-core:3.12.4'
	testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Gson
	implementation 'com.google.code.gson:gson:2.8.8'
	// OnePort
	//implementation 'com.github.iamport:iamport-rest-client-java:0.2.22'


	implementation 'org.webjars:jquery:3.6.2'
	implementation 'org.webjars:bootstrap:5.1.3'
  
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

	// AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'
}

 test {
	useJUnitPlatform()
}

// QueryDSL 빌드 옵션
//def querydslDir = "$buildDir/generated/querydsl"
def querydslDir = "src/main/generated"
sourceSets {
	main.java.srcDirs += [ querydslDir ]
}
tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
clean.doLast {
	file(querydslDir).deleteDir()
}
